=================
padl
=================

program example_padl
  use stdlib_string_type, only: string_type, assignment(=), write (formatted)
  use stdlib_strings, only: padl
  implicit none
  type(string_type) :: string

  string = "left pad this string"
! string <-- "left pad this string"

  print '(dt)', padl(string, 25, "$") ! "$$$$$left pad this string"

  string = padl(string, 25)
! string <-- "     left pad this string"

end program example_padl

---

(translation_unit
  (program
    (program_statement
      (name))
    (use_statement
      (module_name)
      (included_items
        (identifier)
        (assignment)
        (defined_io_procedure)))
    (use_statement
      (module_name)
      (included_items
        (identifier)))
    (implicit_statement
      (none))
    (variable_declaration
      (derived_type
        (type_name))
      (identifier))
    (assignment_statement
      (identifier)
      (string_literal))
    (comment)
    (print_statement
      (format_identifier
        (string_literal))
      (output_item_list
        (call_expression
          (identifier)
          (argument_list
            (identifier)
            (number_literal)
            (string_literal)))))
    (comment)
    (assignment_statement
      (identifier)
      (call_expression
        (identifier)
        (argument_list
          (identifier)
          (number_literal))))
    (comment)
    (end_program_statement
      (name))))

================
if label
================

program foo

 if_label: if (.true.) then
    call do_something()
 else if_label
    call something_else()
 endif if_label

end program foo

---

(translation_unit
  (program
    (program_statement
      (name))
    (if_statement
      (block_label_start_expression)
      (parenthesized_expression
        (boolean_literal))
      (subroutine_call
        (identifier)
        (argument_list))
      (else_clause
        (block_label)
        (subroutine_call
          (identifier)
          (argument_list)))
      (end_if_statement
        (block_label)))
    (end_program_statement
      (name))))

================
split if
================

program foo

 if (.true.) then
 else &
 if (.false.) then
 end if

end program

---

(translation_unit
  (program
    (program_statement
      (name))
    (if_statement
      (parenthesized_expression
        (boolean_literal))
      (elseif_clause
        (parenthesized_expression
          (boolean_literal)))
      (end_if_statement))
    (end_program_statement)))

================================================================================
Assignment/Variable modification clash
================================================================================

program test
  integer :: len
  len = 5
end program test

--------------------------------------------------------------------------------

(translation_unit
  (program
    (program_statement
      (name))
    (variable_declaration
      (intrinsic_type)
      (identifier))
    (assignment_statement
      (identifier)
      (number_literal))
    (end_program_statement
      (name))))
